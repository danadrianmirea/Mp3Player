apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'de.mannodermaus.android-junit5'
apply plugin: 'jacoco'

jacoco {
    toolVersion = "$JACOCO_VERSION"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReportFullDebug(type: JacocoReport, dependsOn: ['testFullDebugUnitTest']) {

    println "project dir: $projectDir"
    println "build dir: $project.buildDir"
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$[0-9].*'
    ]

    def mainSrc = "$project.projectDir/src/main/java"
    def testSupportSrc = "$projectDir/testsupport/src/main/java"
    def daggerSrc = "$project.buildDir/generated/source/kapt/fullDebug"
    def testSupportDaggerSrc = "$projectDir/testsupport/build/generated/source/kapt/fullDebug"

    def mainClasses = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/fullDebugUnitTest", excludes: fileFilter)
    def daggerClasses = fileTree(dir: "$project.buildDir/build/intermediates/javac/fullDebugUnitTest/classes", excludes: fileFilter)
    def testSupportClasses = fileTree(dir: "$projectDir/testsupport/build/tmp/kotlin-classes/fullDebugUnitTest", excludes: fileFilter)
    def testSupportDaggerClasses = fileTree(dir: "$projectDir/testsupport/build/intermediates/javac/fullDebugUnitTest/classes", excludes: fileFilter)


    sourceDirectories.from = files([mainSrc, testSupportSrc, daggerSrc, testSupportDaggerSrc])
    classDirectories.from = files([mainClasses, daggerClasses, testSupportClasses, testSupportDaggerClasses])
    executionData.from = "$project.buildDir/jacoco/testFullDebugUnitTest.exec"
}

android {
    compileSdkVersion TARGET_SDK_VERION
    buildToolsVersion BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion MIN_SDK_VERSION
        targetSdkVersion TARGET_SDK_VERION
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            testCoverageEnabled = true
        }
    }
    flavorDimensions 'default'
    productFlavors {
        full {
            dimension = 'default'
        }
        automation {
            dimension = 'default'
        }
    }

    compileOptions {
        incremental = false
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions { jvmTarget = "1.8" }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
            jacoco {
                includeNoLocationClasses = true
                includes = ['com/github/goldy1992/mp3player/service/**']
                excludes =  [
                        '**/dagger/**',
                        '**/commons/**',
                        '**_Factory**',
                        '**_MembersInjector**',
                        '**/R.class',
                        '**/R$*.class',
                        '**/BuildConfig.*',
                        '**/Manifest*.*',
                        '**/*Test*.*',
                        'android/**/*.*',
                        '**/*$[0-9].*'
                ]
            }
        }
    }

    sourceSets {
        main {
            java.srcDirs = ["src/main/java"]
        }
        test {
            java.srcDirs = ["src/test/java",
                            "$projectDir/testsupport/src/main/java",
                            "$project.buildDir/generated/source/kapt/fullDebug",
                            "$projectDir/testsupport/build/generated/source/kapt/fullDebug" ]
            java.srcDirs += sourceSets.main.java.srcDirs
        }
        androidTest.java.srcDirs += 'src/androidTest/java'
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation group: 'androidx.media', name: 'media', version: MEDIA_VERSION
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: COMMONS_COLLECTIONS4_VERSION
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: COMMONS_LANG_VERSION
    implementation group: 'com.google.guava', name: 'guava', version: GOOGLE_GUAVA_VERSION
    implementation group: 'com.google.android.exoplayer', name: 'exoplayer-core', version: EXO_PLAYER_VERSION
    implementation group: 'com.google.android.exoplayer', name: 'exoplayer-ui', version: EXO_PLAYER_VERSION
    implementation group: 'com.google.android.exoplayer', name: 'extension-mediasession', version: EXO_PLAYER_VERSION
    implementation group: 'androidx.appcompat', name: 'appcompat', version: APP_COMPAT_VERSION
    implementation group: 'androidx.core', name: 'core-ktx', version: ANDROIDX_CORE_KOTLIN_VERSION
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version
    api project(path: ':commons')


    //dagger
    kapt group: 'com.google.dagger', name: 'dagger-compiler', version: DAGGER_VERSION
    api group: 'com.google.dagger', name: 'dagger', version: DAGGER_VERSION

    implementation group: 'androidx.room', name: 'room-runtime', version: ROOM_VERSION
    implementation group: 'androidx.room', name: 'room-ktx', version: ROOM_VERSION
    kapt group: 'androidx.room', name: 'room-compiler', version: ROOM_VERSION


    testImplementation junit5UnitTests
    testRuntimeOnly junit5UnitTestRuntime
    testApi project(":service:testsupport")

    testImplementation("org.robolectric:robolectric:$ROBOLECTRIC_VERSION") {
        exclude group: "com.google.auto.service", module: "auto-service"
    }
    testImplementation group: 'org.robolectric', name: 'shadows-supportv4', version: ROBOLECTRIC_VERSION
    testImplementation group: 'androidx.test', name: 'core', version: TEST_CORE_VERSION

}
