apply plugin: 'jacoco'

jacoco {
  //  toolVersion = jacoco_version
}

def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*',
       // '**/*$[0-9].*',
        '**/dagger/**',
        '**/databinding/**',
        '**hilt_aggregated_deps**',
        '**/Hilt_**'
]


tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

project.afterEvaluate {

    def uiTestSrcSet = ['**/ui/**', '**/preferences/**', '**/activities/**']
    def productFlavors = android.productFlavors.collect {
        flavor -> flavor.name
    }
    def applicableProductFlavor = "full"
    def buildType = 'debug'
    def flavor = getProductFlavor(applicableProductFlavor, productFlavors)
    def (String buildVariant, String buildVariantCapitalised) = getBuildVariant(flavor, buildType)

    if (project.name.equals("commons")) {
        applicableProductFlavor = ""
    }
 
    def unitExecDir = "$buildDir/outputs/unit_test_code_coverage/${buildVariant}UnitTest/test${buildVariantCapitalised}UnitTest.exec"
    def unitBuildFileTree = fileTree(unitExecDir)
    /**
     * Generates a JaCoCo Report for the test coverage for the unit tests.
     */
    task jacocoUnitTestReport(type: JacocoReport, dependsOn: ["test${buildVariantCapitalised}UnitTest"]) {
        group = "Reporting"
        description = "Generate Jacoco coverage unit test reports for the ${buildVariantCapitalised} build variant."
        reports {
            xml.required = true
            html.required = true
        }

        def unitTestExclusions = fileFilter + uiTestSrcSet
        def mainSrc = fileTree(dir: "$project.projectDir/src/main/java", excludes: unitTestExclusions)

        def mainClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${buildVariant}", excludes: unitTestExclusions)
        def javaClasses = fileTree(dir: "${buildDir}/intermediates/javac/${buildVariant}", excludes: unitTestExclusions)

        sourceDirectories.from = files([mainSrc])
        classDirectories.from = files([mainClasses, javaClasses])
        executionData.from = unitBuildFileTree
    }

    def uiTestBuildType = 'debug'
    def uiTestFlavor = getProductFlavor(applicableProductFlavor, productFlavors);
   // def (String buildVariant, String buildVariantCapitalised) = getBuildVariant(uiTestFlavor, uiTestBuildType)
    def uiBuildDir = "${buildDir}/outputs/code_coverage/${buildVariant}AndroidTest/connected"
    def uiBuildFileTree = fileTree(uiBuildDir){
        include "**/*.ec"
    }

    /**
     * Generates a JaCoCo Report for the test coverage for the UI tests.
     */
    task jacocoUiTestReport(type: JacocoReport, dependsOn: ["connected${buildVariantCapitalised}AndroidTest"]) {
        group = "Reporting"
        description = "Generate Jacoco coverage UI (Instrumented) reports for the ${buildVariantCapitalised} build variant."

        reports {
            xml.required = true
            html.required = true
        }

        def mainSrc = fileTree(dir: "$project.projectDir/src/main/java", includes: uiTestSrcSet)//, excludes: fileFilter)
        def mainClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/", includes: ["${buildVariant}/**/ui/**", "${buildVariant}/**/preferences/**", "${buildVariant}/**/activities/**"])//, excludes: fileFilter)
        def javaClasses = fileTree(dir: "${buildDir}/intermediates/javac/", includes: ["${buildVariant}/**/ui/**","${buildVariant}/**/preferences/**", "${buildVariant}/**/activities/**"])//, excludes: fileFilter)

        sourceDirectories.from = files([mainSrc])
        classDirectories.from = files([mainClasses, javaClasses])
        executionData.from = uiBuildFileTree

    }


    /**
     * Generates a JaCoCo Report that aggregates the test coverage for the unit tests and
     * instrumentation tests. This will not have any task dependencies as the unit tests and
     * instrumentation tests should already have been run.
     *
     * We use the original source code but for the classes we use a combination of the debug and
     * release variants.
     *
     * - For the release variant we use all classes excluding the ui directory.
     * - For the debug variant we ONLY use the ui directory.
     */
    task jacocoCombinedUnitTestAndroidTestReport(type: JacocoReport) {
        group = "Reporting"
        description = "Generate Jacoco coverage reports for both UI and Unit Tests on the ${buildVariantCapitalised} build."

        reports {
            xml.required = true
            html.required = true
        }

        def mainSrc = fileTree(dir: "$project.projectDir/src/main/java", excludes: fileFilter)
        def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${buildVariant}", excludes: fileFilter)
        //def releaseKotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${buildVariant}", excludes: fileFilter + ["com/github/goldy1992/mp3player/client/ui**"])
        //def debugKotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${buildVariant}/com/github/goldy1992/mp3player/client/ui/", excludes:fileFilter)
        def javaClasses = fileTree(dir: "${buildDir}/intermediates/javac/${buildVariant}", excludes: fileFilter)// + ["com/github/goldy1992/mp3player/client/ui**"])
        //def releaseJavaClasses = fileTree(dir: "${buildDir}/intermediates/javac/${buildVariant}", excludes: fileFilter + ["com/github/goldy1992/mp3player/client/ui**"])
        //def debugJavaClasses = fileTree(dir: "${buildDir}/intermediates/javac/${buildVariant}/com/github/goldy1992/mp3player/client/ui/",excludes: fileFilter)

       // def mainClasses = releaseKotlinClasses + debugKotlinClasses
       // def javaClasses = releaseJavaClasses + debugJavaClasses

        sourceDirectories.from = files([mainSrc])
        classDirectories.from = files([kotlinClasses, javaClasses])
        executionData.from = unitBuildFileTree + uiBuildFileTree
    }

    task jacocoCombinedReport(type: JacocoReport) {
        group = "Reporting"
        description = "Generate Jacoco coverage reports for both UI and Unit Tests on the ${buildVariantCapitalised} build."

        reports {
            xml.required = true
            html.required = true
        }

//        def mainSrc = fileTree(dir: "$project.projectDir/src/main/java", excludes: fileFilter)
//        def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${buildVariant}", excludes: fileFilter)
//        //def releaseKotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${buildVariant}", excludes: fileFilter + ["com/github/goldy1992/mp3player/client/ui**"])
//        //def debugKotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${buildVariant}/com/github/goldy1992/mp3player/client/ui/", excludes:fileFilter)
//        def javaClasses = fileTree(dir: "${buildDir}/intermediates/javac/${buildVariant}", excludes: fileFilter + ["com/github/goldy1992/mp3player/client/ui**"])
//        //def releaseJavaClasses = fileTree(dir: "${buildDir}/intermediates/javac/${buildVariant}", excludes: fileFilter + ["com/github/goldy1992/mp3player/client/ui**"])
//        //def debugJavaClasses = fileTree(dir: "${buildDir}/intermediates/javac/${buildVariant}/com/github/goldy1992/mp3player/client/ui/",excludes: fileFilter)
//
//        // def mainClasses = releaseKotlinClasses + debugKotlinClasses
//        // def javaClasses = releaseJavaClasses + debugJavaClasses
//
//        sourceDirectories.from = files([mainSrc])
//        classDirectories.from = files([kotlinClasses, javaClasses])
        executionData.from = unitBuildFileTree.plus(uiBuildFileTree)
    }
}

private static List getBuildVariant(flavor, buildType) {
    def buildVariant =
            flavor.isBlank() ?
                buildType : "${flavor}${buildType.capitalize()}"
    [buildVariant, buildVariant.capitalize()]
}





static def getProductFlavor(applicableProductFlavor, productFlavors) {
    def flavor = ''
    if (!productFlavors?.isEmpty() && productFlavors.contains(applicableProductFlavor) ) {
        flavor = applicableProductFlavor
    }
    return flavor
}


